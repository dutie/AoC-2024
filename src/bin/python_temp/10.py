from dataclasses import dataclass
import numpy as np


@dataclass(frozen=True, eq=True)
class Position:
    x: int
    y: int
    
class Grid:
    def __init__(self, inpt_str):
        self.data: np.ndarray = self.parse_data(inpt_str)
        self.width: int = len(self.data[0])
        self.height: int = len(self.data)

    def parse_data(self, inpt_str) -> np.array:
        arr = []
        for line in inpt_str.split("\n"):
            if line == "":
                continue
            row = []
            for c in list(line):
                row.append(int(c))
            arr.append(row)
        return np.array(arr)
        # return np.array([list(map(int, list(line))) for line in inpt_str.split('\n')])
        
    def find_trailheads(self) -> list[Position]:
        trailheads: list[Position] = []
        for row in range(self.height):
            for col in range(self.width):
                if self.data[row][col] == 0:
                    trailheads.append(Position(col, row))
        return trailheads
    
    def height_at(self, pos: Position) -> int:
        return self.data[pos.y][pos.x]

    def get_neighbors(self, pos: Position) -> list[Position]:
        neighbors: list[Position] = []
        x = pos.x
        y = pos.y
        if y > 0:
            neighbors.append(Position(x, y-1))
        if x > 0:
            neighbors.append(Position(x-1, y))
        if y + 1< self.height:
            neighbors.append(Position(x, y+1))
        if x + 1 < self.width:
            neighbors.append(Position(x+1, y))
        return neighbors

def find_paths(grid, start):
    reachable_nines = set()
    visited = {start}
    current_height = grid.height_at(start)
    
    stack = [(start, current_height)]
    
    while stack:
        pos, height = stack.pop()
        
        if grid.height_at(pos) == 9:
            reachable_nines.add(pos)
            continue
            
        for neighbor in grid.get_neighbors(pos):
            if (neighbor not in visited and 
                grid.height_at(neighbor) == height + 1):
                visited.add(neighbor)
                stack.append((neighbor, grid.height_at(neighbor)))
    
    return reachable_nines

def part_one(input: str) -> int:
    grid: Grid = Grid(input)
    print("Grid:")
    print(grid.data)
    
    trailheads = grid.find_trailheads()
    print("Trailheads:", trailheads)
    
    total_score = 0
    for start in trailheads:
        # Each trailhead gets its own fresh set of endpoints
        reachable_endpoints = find_paths(grid, start)
        print(f"Trailhead {start} can reach endpoints: {reachable_endpoints}")
        score = len(reachable_endpoints)
        total_score += score
    
    return total_score
    
    
if __name__ == "__main__":
    p1 = part_one(
        """
4308765476541010123498898543423458767898432123454387210
5219002389532309835567387612210569678763010036767896523
6578111001654318756765487606787634569854321879879265674
7869223210789223643890394565890123452987412969778104985
8954354378901134532431213064321210981236503458763203876
7321269457432001121345302154760107870145783234654312101
3030378766589112030236034565871012565057890145576447878
2109432852348743940107125678965143456760761076485436969
3278501901257657854398324989854234327871252980390125458
4567687823768567761295413070123349818982343101287834301
0123596314899658980786502110543056700178987232396965210
7874105405658743801657876325632198765230876540105456789
6965012308756752102340965434789430124321965431234305678
3453210219567801234561234478996521035898012320123212501
4354234789458943107876874567667830546734343211210789410
3269105656327652106988965413454945675125254302323654321
0178654569810785435843214302123986789076167019454789012
4323763678987696524356903212012675896985098108545643422
5016892109012587813247872456903504765430789217655652101
6727654068103423902136501347865413890121894327896766501
5898343877678014321045696219870322934578765436521897432
0981232966549165012136787900761231025689456943430198125
1270301051032078983023129871234012310780367852391789034
2567410145121189674510036700965567498891234761087076540
3458547236010234567612445212873498567890345678156105421
2189678987321109878102344343962145656765432109343218432
5078981087455610969201257652450034565654501656734569849
6789672398534701454382568701321127674985432349823678958
5010965467629812345699879811232078981276543036910589867
4127854102018790456781236760103465210300187127832430150
3236543201126781065400145407632564367210296676541321041
8745696012337652878312439818541673458341345587560345632
9656787763018943969223456729230982109452213495671256765
2345669854325676852108987634101065432969302104380189854
1105678760134980345670104545432178341878454213298989923
0234389321101671238983203692345899250545563210101876310
2109489430238980108974312781056787167436778921032365400
3478076589845671067065693676176596078929879780123456321
4567189871234567652108787676785454321010785691434234542
8983287860043458943239654587792309451021094396560147623
7654896952154367438740543297871218762136789287678988012
1012345443763219829651270106980367643445672110589689123
5101056339821006710154389015454454324934101023478765434
4298763232100145603455676723303465815873205192107685445
5675610103243234912369879854212556906763216783298596326
4384324234352107809878766765189657875454345690123487015
3295435435461234762703454101078703965234432101094509876
2126306326970345671012963210987612050125105678987610745
4017217017889789982167878456876543140156234783234321030
3018918523778650173450189387945678231287105990125238921
2127809456234043268943201296532169874397654891076149865
3456912387105123457652100145632054365698923781089056774
9320149896696143210781763236541065251207210650198456783
8013234756787056945690854167632107100316540143232343892
7654105665432167832101941018943298765423434234321014901
"""
    )
    print(p1)
    
